/// Methods for sending e-mails
module PrayerTracker.Email

open FSharp.Control.Tasks.ContextInsensitive
open MailKit.Net.Smtp
open MailKit.Security
open Microsoft.Extensions.Localization
open MimeKit
open MimeKit.Text
open PrayerTracker.Entities

/// The e-mail address from which e-mail is sent
let private fromAddress = "prayer@bitbadger.solutions"

/// Get an SMTP client connection
// FIXME: make host configurable
let getConnection () =
  task {
    let client = new SmtpClient ()
    do! client.ConnectAsync ("127.0.0.1", 25, SecureSocketOptions.None)
    return client
    }
      
/// Create a mail message object, filled with everything but the body content
let createMessage (grp : SmallGroup) subj =
  let msg = MimeMessage ()
  msg.From.Add (MailboxAddress (grp.preferences.emailFromName, fromAddress))
  msg.Subject <- subj
  msg.ReplyTo.Add (MailboxAddress (grp.preferences.emailFromName, grp.preferences.emailFromAddress))
  msg

/// Create an HTML-format e-mail message
let createHtmlMessage grp subj body (s : IStringLocalizer) =
  let bodyText =
    [ """<!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml"><head><title></title></head><body>"""
      body
      """<hr><div style="text-align:right;font-family:Arial,Helvetica,sans-serif;font-size:8pt;padding-right:10px;">"""
      s.["Generated by P R A Y E R T R A C K E R"].Value
      "<br><small>"
      s.["from Bit Badger Solutions"].Value
      "</small></div></body></html>"
      ]
    |> String.concat ""
  let msg = createMessage grp subj
  msg.Body <- TextPart (TextFormat.Html, Text = bodyText)
  msg

/// Create a plain-text-format e-mail message
let createTextMessage grp subj body (s : IStringLocalizer) =
  let bodyText =
    [ body
      "\n\n--\n"
      s.["Generated by P R A Y E R T R A C K E R"].Value
      "\n"
      s.["from Bit Badger Solutions"].Value
      ]
    |> String.concat ""
  let msg = createMessage grp subj
  msg.Body <- TextPart (TextFormat.Plain, Text = bodyText)
  msg

/// Send e-mails to a class
let sendEmails (client : SmtpClient) (recipients : Member list) grp subj html text s =
  task {
    let htmlMsg = createHtmlMessage grp subj html s
    let plainTextMsg = createTextMessage grp subj text s

    for mbr in recipients do
      let emailType = match mbr.format with Some f -> EmailFormat.fromCode f | None -> grp.preferences.defaultEmailType
      let emailTo   = MailboxAddress (mbr.memberName, mbr.email)
      match emailType with
      | HtmlFormat ->
          htmlMsg.To.Add emailTo
          do! client.SendAsync htmlMsg
          htmlMsg.To.Clear ()
      | PlainTextFormat ->
          plainTextMsg.To.Add emailTo
          do! client.SendAsync plainTextMsg
          plainTextMsg.To.Clear ()
    }
